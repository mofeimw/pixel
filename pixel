#!/usr/bin/env bash

clear_screen() {
    printf '\e[2J\e[2;H\e[m'
    unset hist undos
}

status_line_clean() {
    printf '\e[s\e[%b;H\e[J\e[u' "$((LINES - 2))"
}

get_term_size() {
    shopt -s checkwinsize; (:;:)
    [[ -z "${LINES:+$COLUMNS}" ]] && read -r LINES COLUMNS < <(stty size)
    printf '\e[%s;%sH' $((LINES/2)) $((COLUMNS/2))
}

print_palette() {
    for i in {1..8}; do
        [[ "$i" == "$color" ]] && block_char="▃" || block_char=" "
        status+="\\e[48;5;${i}m\\e[30m${block_width// /${block_char}}\\e[m"
    done
}

status_line() {
    local status

    printf -v block_width "%$((COLUMNS / 24))s"
    printf -v padding '\e[%bC' "$((COLUMNS - COLUMNS / 3))"

    print_color
    print_palette

    hud=" [arrow keys|space] brush:[b] erase:[x] wipe:[w]"
    [ $COLUMNS -gt 100 ] && hud+=" save:[s] open:[o] undo:[u] redo:[r] quit:[q] color:[1-8]"
    hud="${hud::$COLUMNS}"
    hud="${hud//\[/[\\e[1m}"
    
    printf '\e[s\e[;H\e[2K\e[%s;H<\e[m%b\e[m>%b\e[%s;H\e[99999D\e[A%b\e[u' \
           "$((LINES - 1))" \
           "${print_col}\e[1m${brush_char:=█}" \
           "${hud//\]/\\e[m\]}" \
           "$((LINES - 1))" \
           "${padding}${status//▃/ }\\n${padding}${status}"
}

save_file() {
    local IFS=
    printf '\e[2J\e[2;H%b\e[m\e[%s;H' "${hist[*]}" "$((LINES - 3))"
}

load_file() {
    clear_screen
    printf '\e[2;H%b\e[2;H' "$(<"$1")"
    hist+=("$_")
}

undo() {
    undos+=("${hist[-1]}")
    printf '%b \b' "${hist[-1]}"
    unset 'hist[-1]'
}

redo() {
    hist+=("${undos[-1]}")
    printf '%b' "${undos[-1]}"
    unset 'undos[-1]'
}

hex_to_rgb() {
    ((r=16#${color:1:2},g=16#${color:3:2},b=16#${color:5:6}))
}

get_pos() {
    IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
}

print_color() {
    case "${color:=7}" in
        "#"*) hex_to_rgb;: "\\e[38;2;${r};${g};${b}m" ;;
        [0-9]*):           "\\e[38;5;${color}m" ;;
        *) color="7";:     "\\e[38;5;7m" ;;
    esac
    printf -v print_col '%b' "$_"
}

paint() {
    get_pos
    printf '%b' "\\e[${y};${x}H${2}${1}\\b"
    hist+=("$_")
}

prompt() {
    printf '\e[s\e[%s;H\e[m' "$((LINES - 2))"

    case "$1" in
        s) read -rp "save file: " f; save_file > "${f:-/dev/null}" ;;
        o) read -rp "load file: " f; [[ -f "$f" ]] && load_file "$f" ;;
        c) read -rp "color: " color ;;
        b|i) read -rp "brush: " brush_char ;;
        p) if [ -z "$(pbpaste)" ] || [ "$(pbpaste)" = " " ]; then read -rp "brush: " brush_char; else brush_char="$(pbpaste)"; fi ;;
        w) read -n 1 -rp "wipe? [y/n]: " y; [[ "$y" == y ]] && clear_screen ;;
        q) read -n 1 -rp "quit? [y/n]: " y; [[ "$y" == y ]] && exit ;;
    esac

    printf '\e[u'
    status_line_clean
    status_line
}

cursor() {
    case "${1: -1}" in
        A) get_pos; ((y > 1))         && printf '\e[A' ;;
        B) get_pos; ((y < LINES - 3))   && printf '\e[B' ;;
        C) get_pos; ((x < COLUMNS - 1)) && printf '\e[C' ;;
        D) printf '\e[D' ;;

        k) get_pos; ((y > 1))         && printf '\e[A\e[A' ;;
        j) get_pos; ((y < LINES - 3))   && printf '\e[B\e[B' ;;
        l) get_pos; ((x < COLUMNS - 1)) && printf '\e[C\e[C\e[C\e[C' ;;
        h) printf '\e[D\e[D\e[D\e[D' ;;

        H)   printf '\e[999999D' ;;
        L)   printf '\e[999999C\e[D' ;;

        [1-8]) color="${1: -1}"; status_line ;;

        e|x) paint " " ;;
        d|"") print_color; paint "${brush_char:=█}" "$print_col" ;;
        u) (("${#hist}" > 0))  && undo; status_line ;;
        r) (("${#undos}" > 1)) && redo; status_line ;;

        b|c|i|o|s|q|p|w) prompt "${1: -1}" ;;
    esac
}

main() {
    clear_screen
    get_term_size
    status_line

    trap 'clear_screen' EXIT
    trap 'status_line_clean; get_term_size; status_line' SIGWINCH

    for ((;;)); { read -rs -n 1 key; cursor "$key"; }
}

main "$@"
